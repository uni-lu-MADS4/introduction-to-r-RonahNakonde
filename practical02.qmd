---
title: "Getting started with R"
author: Ronah Precious Nakonde
date: September 23, 2024
format: html
---

### Exercise 1 {#sec-1}

* Create a vector of the letters A, B and C.

```{r}
c("A","B","C")

```
> Your answer as text
[1] "A" "B" "C"


* Assign the vector to a variable `my_letters`
```{r}
my_letters <- c("A","B","C")

```


* Check the what happens when you run `letters` (just this) on the command line.
```{r}
letters
```

> Your answer as text
[1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q"
[18] "r" "s" "t" "u" "v" "w" "x" "y" "z"


* What happens when you concatenate two vectors? Add `c(my_letters , my_letters)`
```{r}
c(my_letters , my_letters)


```

> Your answer as text
[1] "A" "B" "C" "A" "B" "C"


* Add the number 1 to letters. What happens to the type of the vector?
```{r}

append(letters, 1) |> typeof()
```

> Your answer as text

[1] "character"

### Exercise 2


1. Create a vector `my_vec` with the numbers from 1 through 8.
2. Apply the operation `+2` to the vector/
3. Add the vector containing 1, 2, 3, 4 to `my_vec`. What do you observe?

```{r}
my_vec <- c(1:8)
my_vec +2
my_vec + c(1:4)




```

I observe a new vector of even numbers from 2 to 12

### Exercise 3

* Consider the R output of the matrix below:

```
 [,1] [,2]
 [1,]    4    1
 [2,]    9    5
 [3,]   10    7
```

1. What was one of the correct commands used to write this matrix?
2. Assign the matrix as `A`
3. Check the dimensions
4. Extract the element `5`
5. Add the vector `c(0,0,0)` as a new column and update `A`
6. Modify the element 4 to `0`
7. Compute the transpose of `A`

```{r}
# Your answer in code
A <- matrix(c(4,1,9,5,10,7), nrow = 3, ncol = 2, byrow= TRUE)
dim(A)
A[2,2]
A <- cbind(A,c(0,0,0))
A[1,1] <- 0
TransposeA <- t(A)
```


8. Are any values in `A` larger than 10? 
```{r}
A>10

```

9. Are all values in `A` smaller than 10?
```{r}
A<10

```

### Exercise 4

1. Create a function that sums up two values even if provided as characters values

```{r}
mysum_function <- function(a,b) {
  numA <- as.numeric(a)
  numB <- as.numeric(b)
  
  sumAandB <- numA + numB
 return(sumAandB)
}

```


### Exercise 5

1. Create a function that returns the mean, median and standard deviation.

```{r}
statistics <- function(x){
  MeaN <- mean(x, na.rm = TRUE)
  MediaN <- median(x, na.rm = TRUE)
  StandardDeviation <- sd(x, na.rm = TRUE)
  
  return(list(mean = MeaN, median = MediaN, standard_deviation = StandardDeviation))
}

```


### Exercise 6
1. Create a pipe statement that counts the number of NAs in vector containing numbers, characters and missing values.
The output of `c('1' , "a", NA, "2", NA)` should be 2.

```{r}
c('1' , "a", NA, "2", NA) |> is.na() |> sum()


```


